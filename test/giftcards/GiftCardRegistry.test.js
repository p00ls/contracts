const { ethers } = require('hardhat');
const { expect, util } = require('chai');

const { prepare, utils } = require('../fixture.js');

const name = 'MockName';
const symbol = 'MckSmbl';
const uri = 'https://someapi.com/tokenId/';
const fee = ethers.utils.parseEther('1.0');

const FACTORY  = { address: '0x4e59b44847b379578588920ca78fbf26c0b4956c', tx: '0xf8a58085174876e800830186a08080b853604580600e600039806000f350fe7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe03601600081602082378035828234f58015156039578182fd5b8082525050506014600cf31ba02222222222222222222222222222222222222222222222222222222222222222a02222222222222222222222222222222222222222222222222222222222222222' };
const REGISTRY = { address: '0x000000006551c19487814612e58FE06813775758', data: '0x0000000000000000000000000000000000000000fd8eb4e1dca713016c518e31608060405234801561001057600080fd5b5061023b806100206000396000f3fe608060405234801561001057600080fd5b50600436106100365760003560e01c8063246a00211461003b5780638a54c52f1461006a575b600080fd5b61004e6100493660046101b7565b61007d565b6040516001600160a01b03909116815260200160405180910390f35b61004e6100783660046101b7565b6100e1565b600060806024608c376e5af43d82803e903d91602b57fd5bf3606c5285605d52733d60ad80600a3d3981f3363d3d373d3d3d363d7360495260ff60005360b76055206035523060601b60015284601552605560002060601b60601c60005260206000f35b600060806024608c376e5af43d82803e903d91602b57fd5bf3606c5285605d52733d60ad80600a3d3981f3363d3d373d3d3d363d7360495260ff60005360b76055206035523060601b600152846015526055600020803b61018b578560b760556000f580610157576320188a596000526004601cfd5b80606c52508284887f79f19b3655ee38b1ce526556b7731a20c8f218fbda4a3990b6cc4172fdf887226060606ca46020606cf35b8060601b60601c60005260206000f35b80356001600160a01b03811681146101b257600080fd5b919050565b600080600080600060a086880312156101cf57600080fd5b6101d88661019b565b945060208601359350604086013592506101f46060870161019b565b94979396509194608001359291505056fea2646970667358221220ea2fe53af507453c64dd7c1db05549fa47a298dfb825d6d11e1689856135f16764736f6c63430008110033' };
const PROXY    = { address: '0x55266d75D1a14E4572138116aF39863Ed6596E7F', data: '0x655165516551655165516551655165516551655165516551655165516551655160c060405234801561001057600080fd5b5060405161047938038061047983398101604081905261002f9161009d565b6001600160a01b038216158061004c57506001600160a01b038116155b1561006a5760405163340aafcd60e11b815260040160405180910390fd5b6001600160a01b039182166080521660a0526100d0565b80516001600160a01b038116811461009857600080fd5b919050565b600080604083850312156100b057600080fd5b6100b983610081565b91506100c760208401610081565b90509250929050565b60805160a0516103866100f36000396000606d0152600060c301526103866000f3fe6080604052600436106100225760003560e01c8063c4d66de81461003957610031565b366100315761002f610059565b005b61002f610059565b34801561004557600080fd5b5061002f6100543660046102fe565b61006b565b6100696100646101b0565b6101e8565b565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316816001600160a01b03161461014b57604051631506fd4d60e01b81526001600160a01b0382811660048301527f00000000000000000000000000000000000000000000000000000000000000001690631506fd4d90602401602060405180830381865afa15801561010a573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061012e919061032e565b61014b5760405163340aafcd60e11b815260040160405180910390fd5b600061017e7f360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc546001600160a01b031690565b6001600160a01b0316146101a45760405162dc149f60e41b815260040160405180910390fd5b6101ad8161020c565b50565b60006101e37f360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc546001600160a01b031690565b905090565b3660008037600080366000845af43d6000803e808015610207573d6000f35b3d6000fd5b6102158161024c565b6040516001600160a01b038216907fbc7cd75a20ee27fd9adebab32041f755214dbc6bffa90cc0225b39da2e5c2d3b90600090a250565b6001600160a01b0381163b6102bd5760405162461bcd60e51b815260206004820152602d60248201527f455243313936373a206e657720696d706c656d656e746174696f6e206973206e60448201526c1bdd08184818dbdb9d1c9858dd609a1b606482015260840160405180910390fd5b7f360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc80546001600160a01b0319166001600160a01b0392909216919091179055565b60006020828403121561031057600080fd5b81356001600160a01b038116811461032757600080fd5b9392505050565b60006020828403121561034057600080fd5b8151801515811461032757600080fdfea26469706673582212200e14e6944c0aa9246a2cf9c56026abac236e63d6d50c86664b79dfd650b8c6c064736f6c634300081100330000000000000000000000002fe5ccb0d7ea195feb87987d3573f9fcce2b5d5700000000000000000000000041c8f39463a868d3a88af00cd0fe7102f30e44ec' };
const ACCOUNT  = { address: '0x41C8f39463A868d3A88af00cd0fe7102F30E44eC', data: '' };

describe('$Crea Token', function () {
  prepare();

  before(async function () {
    this.accounts.beneficiary = this.accounts.shift();
    this.accounts.user        = this.accounts.shift();
    this.accounts.other       = this.accounts.shift();
  });

  beforeEach(async function () {
    // Deploy factory at 0x4e59b44847b379578588920ca78fbf26c0b4956c
    const { from, gasPrice, gasLimit } = ethers.utils.parseTransaction(FACTORY.tx);
    await this.accounts.admin.sendTransaction({ to: from, value: gasPrice.mul(gasLimit) });
    await ethers.provider.sendTransaction(FACTORY.tx);
    // Deploy ERC-6551 registry
    await this.accounts.admin.sendTransaction({ to: FACTORY.address, data: REGISTRY.data });
    await this.accounts.admin.sendTransaction({ to: FACTORY.address, data: PROXY.data });
    await this.accounts.admin.sendTransaction({ to: FACTORY.address, data: ACCOUNT.data });
    this.registry = await utils.attach('ERC6551Registry', REGISTRY.address);

    // Mock
    this.mock = await utils.deploy('GiftCardRegistry', [name, symbol]);
    await this.mock.setBeneficiary(this.accounts.beneficiary.address);
    await this.mock.setMintFee(fee);
    await this.mock.setBaseURI(uri);

    this.chainId = await ethers.provider.getNetwork().then(({ chainId }) => chainId);

    this.getAccount = (tokenId) => this.mock.getAccountForToken(tokenId).then(address => utils.attach('ERC6551Account', address));
  });

  it('sanity: registry exists', async function () {
    expect(await ethers.provider.getCode(FACTORY.address)).to.not.equal('0x');
    expect(await ethers.provider.getCode(REGISTRY.address)).to.not.equal('0x');
  });

  it('deployment check', async function () {
    expect(await this.mock.name()).to.equal(name);
    expect(await this.mock.symbol()).to.equal(symbol);
    expect(await this.mock.owner()).to.equal(this.accounts.admin.address);
    expect(await this.mock.registry()).to.equal(REGISTRY.address);
    expect(await this.mock.beneficiary()).to.equal(this.accounts.beneficiary.address);
    expect(await this.mock.mintFee()).to.equal(fee);
    expect(await this.mock.newTokenId()).to.equal(0n);
  });

  describe('mint', function () {
    it('missing fees', async function () {
      await expect(this.mock.connect(this.accounts.user).mint(this.accounts.user.address, { value: 0n }))
        .to.be.revertedWith('Invalid payment');
    });

    describe('with fees', function () {
      it('transfers eth to beneficiary', async function () {
        await expect(() => this.mock.connect(this.accounts.user).mint(this.accounts.user.address, { value: fee }))
          .to.changeEtherBalances([ this.accounts.user, this.accounts.beneficiary ], [ fee.mul(-1), fee ])
      });

      it('mint token and creates account', async function () {
        for (const _ of Array(10).fill()) {
          const tokenId = await this.mock.newTokenId();
          const tokenAccount = await this.getAccount(tokenId);

          // check account does not exist
          expect(await ethers.provider.getCode(tokenAccount.address)).to.equal('0x');

          // check mint does not revert
          await expect(this.mock.connect(this.accounts.user).mint(this.accounts.user.address, { value: fee }))
            .to.emit(this.mock, 'Transfer')
            .withArgs(ethers.constants.AddressZero, this.accounts.user.address, tokenId)
            .to.emit(this.registry, 'ERC6551AccountCreated')
            .withArgs(tokenAccount.address, PROXY.address, ethers.constants.HashZero, this.chainId, this.mock.address, tokenId);

          expect(await this.mock.tokenURI(tokenId)).to.equal(uri + tokenId.toString());

          // check account creation
          expect(await ethers.provider.getCode(tokenAccount.address)).to.not.equal('0x');

          // check account prediction match
          expect(
            await this.registry.account(
              PROXY.address,
              ethers.constants.HashZero,
              this.chainId,
              this.mock.address,
              tokenId,
            )
          ).to.equal(
            await this.mock.getAccountForToken(tokenId)
          );

          // check getters
          const result = await tokenAccount.token();
          expect(result[0]).to.equal(this.chainId);
          expect(result[1]).to.equal(this.mock.address);
          expect(result[2]).to.equal(tokenId);
          expect(await tokenAccount.owner()).to.equal(this.accounts.user.address);
        }
      });

      it('does not revert if account is already created', async function () {
        const tokenId = await this.mock.newTokenId();
        const tokenAccount = await this.getAccount(tokenId);

        // create account in anticipation
        await expect(this.registry.createAccount(PROXY.address, ethers.constants.HashZero, this.chainId, this.mock.address, tokenId))
          .to.emit(this.registry, 'ERC6551AccountCreated')
          .withArgs(tokenAccount.address, PROXY.address, ethers.constants.HashZero, this.chainId, this.mock.address, tokenId);

        // check account creation
        expect(await ethers.provider.getCode(tokenAccount.address)).to.not.equal('0x');

        // check mint does not revert
        await expect(this.mock.connect(this.accounts.user).mint(this.accounts.user.address, { value: fee }))
          .to.emit(this.mock, 'Transfer')
          .withArgs(ethers.constants.AddressZero, this.accounts.user.address, tokenId)
          .to.not.emit(this.registry, 'ERC6551AccountCreated')
      });

      it('too much fees', async function () {
        const tokenId = await this.mock.newTokenId();
        const tokenAccount = await this.getAccount(tokenId);

        await expect(() => this.mock.connect(this.accounts.user).mint(this.accounts.user.address, { value: fee.add(100) }))
          .to.changeEtherBalances([ this.accounts.user, this.accounts.beneficiary, tokenAccount ], [ fee.add(100).mul(-1), fee, 100 ])
      });
    });
  });

  describe('admin operation', function () {
    beforeEach(async function () {
      await this.mock.mint(this.accounts.user.address, { value: fee });
    });

    describe('URI', function () {
      const newURI = 'https://someotherapi.com/';

      it('admin can update URI', async function () {
        expect(await this.mock.tokenURI(0)).to.equal(uri + '0');

        await expect(this.mock.connect(this.accounts.admin).setBaseURI(newURI))
          .to.emit(this.mock, 'BatchMetadataUpdate')
          .withArgs(0, ethers.constants.MaxUint256);

          expect(await this.mock.tokenURI(0)).to.equal(newURI + '0');
        });

      it('other cannot update URI', async function () {
        await expect(this.mock.connect(this.accounts.other).setBaseURI(newURI))
          .to.be.revertedWith('Ownable: caller is not the owner');
      });

    });
    describe('beneficiary', function () {
      it('admin can update beneficiary', async function () {
        await expect(this.mock.connect(this.accounts.admin).setBeneficiary(this.accounts.other.address))
          .to.emit(this.mock, 'BeneficiaryUpdate')
          .withArgs(this.accounts.other.address);

        expect(await this.mock.beneficiary()).to.equal(this.accounts.other.address);
      });

      it('other cannot update beneficiary', async function () {
        await expect(this.mock.connect(this.accounts.other).setBeneficiary(this.accounts.other.address))
          .to.be.revertedWith('Ownable: caller is not the owner');
      });
    });
    describe('mint fee', function () {
      const newMintFee = 420n;

      it('admin can update mint fee', async function () {
        await expect(this.mock.connect(this.accounts.admin).setMintFee(newMintFee))
          .to.emit(this.mock, 'MintFeeUpdate')
          .withArgs(newMintFee);

        expect(await this.mock.mintFee()).to.equal(newMintFee);
      });

      it('other cannot update mint fee', async function () {
        await expect(this.mock.connect(this.accounts.other).setMintFee(newMintFee))
          .to.be.revertedWith('Ownable: caller is not the owner');
      });
    });
  });

  describe('account operations', function () {
    beforeEach(async function () {
      this.tokenId = await this.mock.newTokenId();
      this.tokenAccount = await this.getAccount(this.tokenId);

      await this.mock.mint(this.accounts.user.address, { value: fee });
    });

    it('check signer validity', async function () {
      expect(await this.tokenAccount.isValidSigner(this.accounts.user.address, "0x12345678"))
        .to.equal(this.tokenAccount.interface.getSighash('isValidSigner'));

      expect(await this.tokenAccount.isValidSigner(this.accounts.other.address, "0x12345678"))
        .to.equal('0x00000000');
    });

    it('check signature validity', async function () {
      const message = "hello world!";
      const hash = ethers.utils.hashMessage(message);
      const userSign = await this.accounts.user.signMessage(message);
      const otherSign = await this.accounts.other.signMessage(message);

      expect(await this.tokenAccount.isValidSignature(hash, userSign))
        .to.equal(this.tokenAccount.interface.getSighash('isValidSignature'));

        expect(await this.tokenAccount.isValidSignature(hash, otherSign))
        .to.equal('0x00000000');
    });

    it.skip('signature verification support chainning (not available with standard wallet)', async function () {
      const message = "hello world!";
      const hash = ethers.utils.hashMessage(message);
      const sign = await this.accounts.user.signMessage(message);

      let account = this.accounts.user;
      for (const _ of Array(10).fill()) {
        account = await this.mock.mint(account.address, { value: fee })
          .then(tx => tx.wait())
          .then(receipt => receipt.events.find(ev => ev.event == 'Transfer').args.tokenId)
          .then(tokenId => this.getAccount(tokenId));

        expect(await account.isValidSignature(hash, sign))
          .to.equal(this.tokenAccount.interface.getSighash('isValidSignature'));
      }
    });

    it('execute is protected', async function () {
      await expect(this.tokenAccount.connect(this.accounts.other).execute(ethers.constants.AddressZero, 0, '0x', 0))
        .to.be.reverted; // custom error
    });

    it('execute bubbles reverts', async function () {
      // Not enough tokens for operation
      const data = this.token.interface.encodeFunctionData('transfer', [ this.accounts.other.address, ethers.constants.MaxUint256 ]);
      await expect(this.tokenAccount.connect(this.accounts.user).execute(this.token.address, 0, data, 0))
        .to.be.revertedWith('ERC20: transfer amount exceeds balance');
    });

    it('account receive and spend ether', async function () {
      const value = 23_000n;

      // receive
      await expect(() => this.accounts.admin.sendTransaction({ to: this.tokenAccount.address, value }))
        .to.changeEtherBalances([ this.accounts.admin, this.tokenAccount ], [ -value, value ]);

      // spend
      await expect(() => this.tokenAccount.connect(this.accounts.user).execute(this.accounts.other.address, value, '0x', 0))
        .to.changeEtherBalances([ this.tokenAccount, this.accounts.other ], [ -value, value ]);
    });

    it('account receive and spend erc20', async function () {
      const value = 23_000n;

      // receive
      await expect(() => this.token.transfer(this.tokenAccount.address, value))
        .to.changeTokenBalances(this.token, [ this.accounts.admin, this.tokenAccount ], [ -value, value ]);

      // spend
      const data = this.token.interface.encodeFunctionData('transfer', [ this.accounts.other.address, value ]);
      await expect(() => this.tokenAccount.connect(this.accounts.user).execute(this.token.address, 0, data, 0))
        .to.changeTokenBalances(this.token, [ this.tokenAccount, this.accounts.other ], [ -value, value ]);
    });
  });
});
